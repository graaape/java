泛型
所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如继承或实现这个接口，用这个类型声明变量、创建对象）确定（即传入实际的类型参数，也称为类型实参）。

集合接口或集合类在jdk5.0时都修改为带泛型的结构。
在实例化集合类时，可以指明具体的泛型类型。
指明完后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等使用到类的泛型的位置），都指定为实例化的泛型类型。
比如：
add(E e)--->实例化后：add(Integer e)	
注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，用包装类替换。
如果实例化时没有指明泛型的类型，默认类型为java.lang.Object类型。
File类
File类的一个对象，代表一个文件或一个文件目录。
File类声明在java.io包下。
File类中涉及到关于文件或文件目录的创建、删除、重命名、修改时间、修改文件大小等方法，未涉及到写入或读取文件内容的操作。如果需要读取或写入文件内容，必须使用IO流来完成。
File类的对象常会作为参数传递到流的构造器中，指明读取或写入的“终点”。
常用构造器：
File(String filePath);
File(String parentPath,String childPath);
File(File parentFile,String childPath);
路径的分类：
相对路径：相较于某个路径下指明的路径。
绝对路径：包含盘符在内的文件或文件目录的路径。
IO流原理及流的分类
Java IO原理
I/O是Input/Output的缩写。I/O技术用于处理设备之间的数据传输，如读写文件、网络通讯等。
Java程序中，对于数据的输入/输出操作以“流（Stream）”的方式进行。
java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。
流的分类
按操作数据单位的不同，分为：字节流（8bit）、字符流（16bit）。
按数据流的流向不同，分为：输入流、输出流。
按流的角色不同，分为：节点流(或文件流)、处理流（缓冲流为处理流的一种）。
流的体系结构
抽象基类	节点流（或文件流）	缓冲流（处理流的一种）
InputStream	FileInputStream	BufferedInputStream
OutputStream	FileOutputStream	BufferedOutputStream
Reader	FileReader	BufferedReader
Writer	FileWriter	BufferedWriter